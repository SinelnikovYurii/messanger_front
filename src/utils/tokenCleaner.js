// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö JWT —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è JWT —Å–µ–∫—Ä–µ—Ç–∞ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö

class TokenCleaner {
    static clearAllTokens() {
        console.log('üßπ TokenCleaner: Clearing all stored authentication data');

        // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
        const keysToRemove = ['token', 'user', 'authTimestamp', 'refreshToken'];

        keysToRemove.forEach(key => {
            if (localStorage.getItem(key)) {
                console.log(`üóëÔ∏è Removing ${key} from localStorage`);
                localStorage.removeItem(key);
            }
        });

        // –û—á–∏—â–∞–µ–º sessionStorage –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        keysToRemove.forEach(key => {
            if (sessionStorage.getItem(key)) {
                console.log(`üóëÔ∏è Removing ${key} from sessionStorage`);
                sessionStorage.removeItem(key);
            }
        });

        console.log('‚úÖ TokenCleaner: All authentication data cleared');

        // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        window.dispatchEvent(new Event('authChange'));

        return true;
    }

    static forceLogoutAllUsers() {
        this.clearAllTokens();

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ç—É–¥–∞
        if (window.location.pathname !== '/login') {
            console.log('üîÑ Redirecting to login page');
            window.location.replace('/login');
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (window.alert) {
            window.alert('–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –≤–µ—Ä—Å–∏–∏)
    static needsTokenCleanup() {
        const lastCleanupVersion = localStorage.getItem('tokenCleanupVersion');
        const currentVersion = '2.0.0'; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è JWT —Å–µ–∫—Ä–µ—Ç–∞

        return !lastCleanupVersion || lastCleanupVersion !== currentVersion;
    }

    // –û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    static markTokenCleanupComplete() {
        const currentVersion = '2.0.0'; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é
        localStorage.setItem('tokenCleanupVersion', currentVersion);
        console.log('‚úÖ Token cleanup marked as complete for version:', currentVersion);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    static autoCleanupIfNeeded() {
        if (this.needsTokenCleanup()) {
            console.log('üîÑ Auto-cleanup needed, clearing old tokens');
            this.clearAllTokens();
            this.markTokenCleanupComplete();
            return true;
        }
        return false;
    }
}

export default TokenCleaner;

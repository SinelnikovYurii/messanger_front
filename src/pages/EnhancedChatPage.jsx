import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { logout } from '../store/slices/authSlice';
import chatService from '../services/chatService';
import EnhancedChatWindow from '../components/EnhancedChatWindow';
import UserSearchModal from '../components/UserSearchModal';
import CreateGroupChatModal from '../components/CreateGroupChatModal';
import FriendsManager from '../components/FriendsManager';

const ChatPage = () => {
  const [chats, setChats] = useState([]);
  const [selectedChat, setSelectedChat] = useState(null);
  const [showUserSearch, setShowUserSearch] = useState(false);
  const [showCreateGroup, setShowCreateGroup] = useState(false);
  const [showFriends, setShowFriends] = useState(false);
  const [activeTab, setActiveTab] = useState('chats');
  const [loading, setLoading] = useState(true);

  const { user } = useSelector(state => state.auth);
  const dispatch = useDispatch();

  useEffect(() => {
    loadChats();
  }, []);

  const loadChats = async () => {
    try {
      setLoading(true);
      const userChats = await chatService.getUserChats();
      setChats(userChats);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleUserSelect = (chatOrUser) => {
    if (chatOrUser.chatType) {
      // –≠—Ç–æ —á–∞—Ç
      setSelectedChat(chatOrUser);
      if (!chats.find(c => c.id === chatOrUser.id)) {
        setChats([chatOrUser, ...chats]);
      }
    } else {
      // –≠—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
      // –õ–æ–≥–∏–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ UserSearchModal
    }
  };

  const handleChatCreated = (newChat) => {
    setChats([newChat, ...chats]);
    setSelectedChat(newChat);
  };

  const handleChatUpdate = (updatedChat) => {
    if (updatedChat === null) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç
      setChats(chats.filter(c => c.id !== selectedChat.id));
      setSelectedChat(null);
    } else {
      // –ß–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω
      setChats(chats.map(c => c.id === updatedChat.id ? updatedChat : c));
      setSelectedChat(updatedChat);
    }
  };

  const formatLastMessage = (chat) => {
    if (!chat.lastMessage) return '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';

    const message = chat.lastMessage;
    if (message.messageType === 'SYSTEM') {
      return message.content;
    }

    const senderName = message.sender?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    const content = message.content.length > 30
      ? message.content.substring(0, 30) + '...'
      : message.content;

    return `${senderName}: ${content}`;
  };

  const formatLastMessageTime = (timestamp) => {
    if (!timestamp) return '';

    const date = new Date(timestamp);
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const messageDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());

    if (messageDate.getTime() === today.getTime()) {
      return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    } else {
      return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });
    }
  };

  const getChatTitle = (chat) => {
    if (chat.chatType === 'GROUP') {
      return chat.chatName || '–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç';
    } else {
      // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
      const otherParticipant = chat.participants?.find(p => p.id !== user?.id);
      return otherParticipant ? otherParticipant.username : '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç';
    }
  };

  const handleLogout = () => {
    dispatch(logout());
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
      <div className="w-80 bg-white border-r border-gray-200 flex flex-col">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="p-4 border-b border-gray-200 bg-blue-50">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center mr-3">
                {user?.profilePictureUrl ? (
                  <img
                    src={user.profilePictureUrl}
                    alt={user.username}
                    className="w-full h-full rounded-full object-cover"
                  />
                ) : (
                  <span className="text-white font-semibold text-lg">
                    {user?.username?.charAt(0)?.toUpperCase() || 'U'}
                  </span>
                )}
              </div>
              <div>
                <h1 className="text-lg font-semibold text-gray-800">
                  {user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                </h1>
                <div className="flex items-center">
                  <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                  <span className="text-sm text-gray-600">–í —Å–µ—Ç–∏</span>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <button
                onClick={() => {/* TODO: –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è */}}
                className="p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-200 rounded-full"
                title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"
              >
                ‚öôÔ∏è
              </button>
              <button
                onClick={handleLogout}
                className="p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-full"
                title="–í—ã–π—Ç–∏"
              >
                üö™
              </button>
            </div>
          </div>
        </div>

        {/* –¢–∞–±—ã */}
        <div className="flex border-b border-gray-200">
          <button
            onClick={() => setActiveTab('chats')}
            className={`flex-1 px-4 py-3 text-sm font-medium ${
              activeTab === 'chats'
                ? 'text-blue-600 border-b-2 border-blue-600'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            –ß–∞—Ç—ã
          </button>
          <button
            onClick={() => setActiveTab('friends')}
            className={`flex-1 px-4 py-3 text-sm font-medium ${
              activeTab === 'friends'
                ? 'text-blue-600 border-b-2 border-blue-600'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            –î—Ä—É–∑—å—è
          </button>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="p-4 border-b border-gray-200 space-y-2">
          <button
            onClick={() => setShowUserSearch(true)}
            className="w-full bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          </button>
          <button
            onClick={() => setShowCreateGroup(true)}
            className="w-full bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
          >
            –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
          </button>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞ */}
        <div className="flex-1 overflow-y-auto">
          {activeTab === 'chats' && (
            <>
              {loading && (
                <div className="p-4 text-center text-gray-500">
                  –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...
                </div>
              )}

              {!loading && chats.length === 0 && (
                <div className="p-4 text-center text-gray-500">
                  <div className="mb-2">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤</div>
                  <div className="text-sm">–ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</div>
                </div>
              )}

              {!loading && chats.map(chat => (
                <div
                  key={chat.id}
                  onClick={() => setSelectedChat(chat)}
                  className={`p-4 border-b border-gray-100 cursor-pointer hover:bg-gray-50 ${
                    selectedChat?.id === chat.id ? 'bg-blue-50 border-blue-200' : ''
                  }`}
                >
                  <div className="flex items-center">
                    <div className="w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center mr-3">
                      {chat.chatAvatarUrl ? (
                        <img
                          src={chat.chatAvatarUrl}
                          alt={getChatTitle(chat)}
                          className="w-full h-full rounded-full object-cover"
                        />
                      ) : (
                        <span className="text-gray-600 font-semibold">
                          {chat.chatType === 'GROUP' ? 'üë•' : getChatTitle(chat).charAt(0).toUpperCase()}
                        </span>
                      )}
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="flex justify-between items-center">
                        <div className="font-medium text-gray-900 truncate">
                          {getChatTitle(chat)}
                        </div>
                        <div className="text-xs text-gray-500">
                          {formatLastMessageTime(chat.lastMessageAt)}
                        </div>
                      </div>
                      <div className="text-sm text-gray-500 truncate">
                        {formatLastMessage(chat)}
                      </div>
                      {chat.chatType === 'GROUP' && (
                        <div className="text-xs text-gray-400">
                          {chat.participants?.length || 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </>
          )}

          {activeTab === 'friends' && (
            <div className="p-4">
              <FriendsManager />
            </div>
          )}
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
      <EnhancedChatWindow
        selectedChat={selectedChat}
        onChatUpdate={handleChatUpdate}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <UserSearchModal
        isOpen={showUserSearch}
        onClose={() => setShowUserSearch(false)}
        onUserSelect={handleUserSelect}
        mode="single"
      />

      <CreateGroupChatModal
        isOpen={showCreateGroup}
        onClose={() => setShowCreateGroup(false)}
        onChatCreated={handleChatCreated}
      />
    </div>
  );
};

export default ChatPage;
